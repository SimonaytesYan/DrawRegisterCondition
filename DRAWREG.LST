Turbo Assembler	 Version 4.1	    03/02/23 18:56:57	    Page 1
drawreg.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     org 100h
      4				     locals __
      5
      6	0100  E9 001Br		     Start:  jmp Main
      7
      8	0103			     NewInt09	     proc
      9	0103  06			     push es					     ;
     10	0104  53			     push bx					     ;
     11	0105  52			     push dx					     ;
     12	0106  50			     push ax					     ;
     13	0107  56			     push si					     ;
     14	0108  51			     push cx					     ;
     15	0109  55			     push bp					     ;
     16	010A  57			     push di					     ;save regs
     17
     18	010B  E4 60			     in	al, 60h					     ;get scan-code from 60-th pin
     19	010D  3C 2B			     cmp al, 43d				     ;\	or | buttons
     20
     21	010F  75 36			     jne __end_draw_frame
     22	0111  BB B800				     mov bx, 0b800h			     ;<----------------------|
     23	0114  8E C3				     mov es, bx					     ;				    +
     24				     |
     25	0116  BD 01C6				     mov bp, 2*160d+134d		     ;offset in	vmem		     |
     26	0119  B6 0F				     mov dh, 15d				     ;height of	the frame    |	    +
     27				     ARGUMENTS TO DRAW FRAME
     28	011B  B2 07				     mov dl, 7d					     ;weight of	the frame    |
     29	011D  B4 7E				     mov ah, 07eh			     ;color atr	     <-------|
     30
     31	011F  33 DB				     xor bx, bx
     32	0121  BB 0154r				     lea bx, cs:is_frame_visible						    +
     33				     ;put in bx	offset of the labal is_frame_visible
     34	0124  2E: 8B 0F				     mov word ptr cx, cs:[bx]							    +
     35				     ;put in cx	status is_frame_visible
     36	0127  83 F9 01				     cmp cx, 1
     37
     38	012A  74 0E				     je	__clear_frame
     39	012C  BE 0009r					     mov si, cs:[offset	double_frame]					    +
     40				     ;symbols to frame
     41	012F  2E: C7 07	0001				     mov word ptr cs:[bx], 1d						    +
     42				     ;set new status
     43	0134  E8 001F					     call DrawFrame
     44	0137  EB 0E 90					     jmp __end_draw_frame
     45	013A					     __clear_frame:
     46	013A  B4 01					     mov ah, 1d
     47	013C  BE 0012r					     mov si, cs:[offset	empty_frame]					    +
     48				     ;symbols to frame
     49	013F  2E: C7 07	0000				     mov word ptr cs:[bx], 0d						    +
     50				     ;set new status
     51	0144  E8 000F					     call DrawFrame
     52
     53	0147			     __end_draw_frame:
     54	0147  5F			     pop di					     ;
     55	0148  5D			     pop bp					     ;
     56	0149  59			     pop cx					     ;
     57	014A  5E			     pop si					     ;
Turbo Assembler	 Version 4.1	    03/02/23 18:56:57	    Page 2
drawreg.asm



     58	014B  58			     pop ax					     ;
     59	014C  5A			     pop dx					     ;
     60	014D  5B			     pop bx					     ;
     61	014E  07			     pop es					     ;recover value of registers
     62
     63	014F  EA			     db	 0eah					     ;make jmp far
     64	0150  0000		     Old09Offset	     dw	0		     ;jmp offset
     65	0152  0000		     Old90Segment    dw	0		     ;jmp segment
     66
     67	0154			     endp NewInt09
     68
     69	0154  0000		     is_frame_visible: dw 0
     70
     71				     include FRAME.ASM
1    72
1    73				     ;--------------------------------
1    74				     ;EXPECTS:	 es->videomemory
1    75				     ;INPUTS:	 bp - offset in	vmem
1    76				     ;			 dh - height of	frame
1    77				     ;			 dl - weight of	frame
1    78				     ;			 ah - color atr
1    79				     ;		 si - pointer to array with 9 symbols to draw frame in format:
1    80				     ;		 0:[left  up   corner]
1    81				     ;		 1:[up	       border]
1    82				     ;		 2:[right up   corner]
1    83				     ;		 3:[left       border]
1    84				     ;		 4:[symbol to fill frame]
1    85				     ;		 5:[right      border]
1    86				     ;		 6:[left  down corner]
1    87				     ;		 7:[bottom     border]
1    88				     ;		 8:[right down corner]
1    89				     ;
1    90				     ;OUTPUTS:	 None
1    91				     ;DESTROYS:	 bx, cx, di, bp, al, dx
1    92				     ;--------------------------------
1    93	0156			     DrawFrame	 proc
1    94	0156  80 EA 02			 sub dl, 2	     ;now we don`t consider the	1-st and the last symbol, because them we   +
     95				     will put without loops
1    96	0159  80 EE 02			 sub dh, 2	     ;the same reason
1    97
1    98	015C  8B FD			 mov di, bp
1    99	015E  2E: 8A 04			 mov al, cs:[si	+ 0]
1   100	0161  2E: 8A 5C	01		 mov bl, cs:[si	+ 1]
1   101	0165  2E: 8A 7C	02		 mov bh, cs:[si	+ 2]
1   102	0169  33 C9			 xor cx, cx	     ;
1   103	016B  8A CA			 mov cl, dl	     ;cx = dl
1   104	016D  E8 003A			 call PutFrameLine   ;draw the first line
1   105
1   106	0170  81 C5 00A0		 add bp, 160d	     ;go to the	next line
1   107
1   108	0174  2E: 8A 5C	04		 mov bl, cs:[si	+ 4]
1   109	0178  2E: 8A 7C	05		 mov bh, cs:[si	+ 5]
1   110	017C				 __next:
1   111	017C  8B FD			     mov di, bp
1   112	017E  2E: 8A 44	03		     mov al, cs:[si + 3]    ;rewrite in	the loop because in PutFrameLine al destroys
1   113	0182  33 C9			     xor cx, cx		 ;
1   114	0184  8A CA			     mov cl, dl		 ;cx = dl
Turbo Assembler	 Version 4.1	    03/02/23 18:56:57	    Page 3
drawreg.asm



1   115	0186  E8 0021			     call PutFrameLine	 ;draw all middle lines
1   116	0189  81 C5 00A0		     add bp, 160d	 ;go to	the next line
1   117
1   118	018D  FE CE			     dec dh		 ;dh--
1   119	018F  80 FE 00			     cmp dh, 0
1   120	0192  75 E8			     jne __next		 ;while(dh!=0)
1   121
1   122	0194  8B FD			 mov di, bp
1   123	0196  2E: 8A 44	06		 mov al, cs:[si	+ 6]
1   124	019A  2E: 8A 5C	07		 mov bl, cs:[si	+ 7]
1   125	019E  2E: 8A 7C	08		 mov bh, cs:[si	+ 8]
1   126	01A2  33 C9			 xor cx, cx	     ;
1   127	01A4  8A CA			 mov cl, dl	     ;cx = dl
1   128	01A6  E8 0001			 call PutFrameLine   ;draw the first line
1   129
1   130	01A9  C3			 ret
1   131	01AA					 endp
1   132
1   133				     ;--------------------------------
1   134				     ;PutFrameLine
1   135				     ;--------------------------------
1   136				     ;EXPECTS:	 es -> videomemory segment
1   137				     ;		 cld
1   138				     ;INPUTS:	 di - offset in	videomemory
1   139				     ;		 ah - color atr	of the symbols
1   140				     ;		 al - ASCII code of the	1-st symbol
1   141				     ;		 bl - ASCII code of cx middle symbols
1   142				     ;		 bh - ASCII code of the	last symbol
1   143				     ;		 cx - numbers of middle	symbols
1   144				     ;
1   145				     ;OUTPUTS:	 None
1   146				     ;DESTROYS:	 di, al, cx
1   147				     ;--------------------------------
1   148	01AA			     PutFrameLine    proc
1   149	01AA  FC			 cld	     ;ToDo remove
1   150	01AB  AB			 stosw	     ;put the fisrt symbol
1   151
1   152	01AC  8A C3			 mov al, bl  ;change putting simdol to middle symbol
1   153	01AE  F3> AB			 rep stosw   ;put all middle symbols
1   154
1   155	01B0  8A C7			 mov al, bh  ;change putting simdol to the last	symbol
1   156	01B2  AB			 stosw
1   157
1   158	01B3  C3			 ret
1   159	01B4					     endp
1   160				     ;--------------------------------
1   161
1   162	01B4			     .data
1   163				     ;		 0:[left  up   corner]
1   164				     ;		 1:[up	       border]
1   165				     ;		 2:[right up   corner]
1   166				     ;		 3:[left       border]
1   167				     ;		 4:[symbol to fill frame]
1   168				     ;		 5:[right      border]
1   169				     ;		 6:[left  down corner]
1   170				     ;		 7:[bottom     border]
1   171				     ;		 8:[right down corner]
Turbo Assembler	 Version 4.1	    03/02/23 18:56:57	    Page 4
drawreg.asm



1   172
1   173	0000  DA C4 BF 7C 20 7C	C0+  single_frame db 0dah, 0c4h, 0bfh, '|',  ' ', '|',	0c0h, '-',  0d9h
    174	      2D D9
1   175
1   176	0009  C9 CD BB BA 20 BA	C8+  double_frame db 0c9h, 0cdh, 0bbh, 0bah, ' ', 0bah,	0c8h, 0cdh, 0bch
    177	      CD BC
1   178
1   179	0012  09*(20)		     empty_frame db 9 dup(' ')
    180
    181	001B			     EOP:
    182
    183	001B			     Main:
    184	001B  33 DB			     xor bx, bx								     ;
    185	001D  8E C3			     mov es, bx								     ;es = 0
    186	001F  BB 0024			     mov bx, 4*9							     ;Set es:[bx] to+
    187				     int table ot 9-th interruption
    188
    189	0022  26: 8B 07			     mov ax, word ptr es:[bx]				     ;
    190	0025  A3 0150r			     mov word ptr [Old09Offset], ax		     ;
    191	0028  26: 8B 47	02		     mov ax, word ptr es:[bx+2]				     ;
    192	002C  A3 0152r			     mov word ptr [Old90Segment], ax		     ;save address of old interruption	    +
    193				     handler
    194
    195	002F  FA			     cli
    196	0030  26: C7 07	0103r		     mov es:[bx], offset NewInt09		     ;
    197	0035  8C C8			     mov ax, cs								     ;
    198	0037  26: 89 47	02		     mov es:[bx+2], ax						     ;Put in int table new  +
    199				     9th int
    200	003B  FB			     sti
    201
    202	003C  B8 3100			     mov ax, 3100h
    203	003F  BA 001Br			     mov dx, offset EOP
    204	0042  D1 EA D1 EA D1 EA	D1+	     shr dx, 4								     ;Convert to    +
    205	      EA		     paragraphs
    206	004A  42			     inc dx								     ;Round up
    207	004B  CD 21			     int 21h								     ;End program   +
    208				     with saving code of new int in memory
    209
    210				     end Start
Turbo Assembler	 Version 4.1	    03/02/23 18:56:57	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/02/23"
??FILENAME			  Text	 "drawreg "
??TIME				  Text	 "18:56:57"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 DRAWREG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
DOUBLE_FRAME			  Byte	 DGROUP:0009
DRAWFRAME			  Near	 DGROUP:0156
EMPTY_FRAME			  Byte	 DGROUP:0012
EOP				  Near	 DGROUP:001B
IS_FRAME_VISIBLE		  Near	 DGROUP:0154
MAIN				  Near	 DGROUP:001B
NEWINT09			  Near	 DGROUP:0103
OLD09OFFSET			  Word	 DGROUP:0150
OLD90SEGMENT			  Word	 DGROUP:0152
PUTFRAMELINE			  Near	 DGROUP:01AA
SINGLE_FRAME			  Byte	 DGROUP:0000
START				  Near	 DGROUP:0100
__CLEAR_FRAME			  Near	 DGROUP:013A
__END_DRAW_FRAME		  Near	 DGROUP:0147
__NEXT				  Near	 DGROUP:017C

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  004D Word	  Public  DATA
  _TEXT				  16  01B4 Word	  Public  CODE
