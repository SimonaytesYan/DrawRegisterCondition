Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 1
drawreg.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     org 100h
      4				     locals __
      5
      6	0100  E9 0032r		     Start:  jmp Main
      7
      8	0103			     NewInt09	     proc
      9	0103  06			     push es					     ;
     10	0104  53			     push bx					     ;
     11	0105  52			     push dx					     ;
     12	0106  50			     push ax					     ;
     13	0107  56			     push si					     ;
     14	0108  51			     push cx					     ;
     15	0109  55			     push bp					     ;
     16	010A  57			     push di					     ;save regs
     17
     18	010B  50			     push ax
     19	010C  E4 60			     in	al, 60h					     ;get scan-code from 60-th pin
     20	010E  3C 2B			     cmp al, 43d				     ;\	or | buttons
     21	0110  58			     pop ax
     22
     23	0111  75 53			     jne __end_draw_frame
     24	0113  53				     push bx
     25	0114  51				     push cx
     26	0115  33 DB				     xor bx, bx
     27	0117  BB 0173r				     lea bx, cs:is_frame_visible						    +
     28				     ;put in bx	offset of the labal is_frame_visible
     29	011A  2E: 8B 0F				     mov word ptr cx, cs:[bx]							    +
     30				     ;put in cx	status is_frame_visible
     31	011D  83 F9 01				     cmp cx, 1
     32	0120  59				     pop cx
     33	0121  5B				     pop bx
     34
     35	0122  74 35				     je	__clear_frame
     36	0124  16					     push ss
     37	0125  06					     push es
     38	0126  1E					     push ds
     39	0127  54					     push sp
     40	0128  55					     push bp
     41	0129  57					     push di
     42	012A  56					     push si
     43	012B  52					     push dx
     44	012C  51					     push cx
     45	012D  53					     push bx
     46	012E  50					     push ax
     47
     48	012F  BB B800					     mov bx, 0b800h			     ;<----------------------|
     49	0132  8E C3					     mov es, bx					     ;			    +
     50				     |
     51	0134  BD 01C6					     mov bp, 2*160d+134d		     ;offset in	vmem		    +
     52				     |
     53	0137  B6 0D					     mov dh, 13d				     ;height of	the frame   +
     54				     | ARGUMENTS TO DRAW FRAME
     55	0139  B2 09					     mov dl, 9d					     ;weight of	the frame   +
     56				     |
     57	013B  B4 7E					     mov ah, 07eh			     ;color atr	     <-------|
Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 2
drawreg.asm



     58
     59	013D  BE 0009r					     mov si, cs:[offset	double_frame]					    +
     60				     ;symbols to frame
     61	0140  2E: C7 07	0001				     mov word ptr cs:[bx], 1d						    +
     62				     ;set new status
     63	0145  E8 002D					     call DrawFrame
     64
     65	0148  BB 0268					     mov bx, 3*160d+136d
     66	014B  E8 0085					     call DrawRegText
     67
     68	014E  BB 0276					     mov bx, 3*160d+150d
     69	0151  B6 71					     mov dh, 71h
     70	0153  E8 00B1					     call DrawRegNumber
     71
     72	0156  EB 0E 90					     jmp __end_draw_frame
     73	0159					     __clear_frame:
     74	0159  B4 01					     mov ah, 1d
     75	015B  BE 0012r					     mov si, cs:[offset	empty_frame]					    +
     76				     ;symbols to frame
     77	015E  2E: C7 07	0000				     mov word ptr cs:[bx], 0d						    +
     78				     ;set new status
     79	0163  E8 000F					     call DrawFrame
     80
     81	0166			     __end_draw_frame:
     82	0166  5F			     pop di					     ;
     83	0167  5D			     pop bp					     ;
     84	0168  59			     pop cx					     ;
     85	0169  5E			     pop si					     ;
     86	016A  58			     pop ax					     ;
     87	016B  5A			     pop dx					     ;
     88	016C  5B			     pop bx					     ;
     89	016D  07			     pop es					     ;recover value of registers
     90
     91	016E  EA			     db	 0eah					     ;make jmp far
     92	016F  0000		     Old09Offset	     dw	0		     ;jmp offset
     93	0171  0000		     Old90Segment    dw	0		     ;jmp segment
     94
     95	0173			     endp NewInt09
     96
     97	0173  0000		     is_frame_visible: dw 0
     98
     99				     include FRAME.ASM
1   100
1   101				     ;--------------------------------
1   102				     ;EXPECTS:	 es->videomemory
1   103				     ;INPUTS:	 bp - offset in	vmem
1   104				     ;			 dh - height of	frame
1   105				     ;			 dl - weight of	frame
1   106				     ;			 ah - color atr
1   107				     ;		 si - pointer to array with 9 symbols to draw frame in format:
1   108				     ;		 0:[left  up   corner]
1   109				     ;		 1:[up	       border]
1   110				     ;		 2:[right up   corner]
1   111				     ;		 3:[left       border]
1   112				     ;		 4:[symbol to fill frame]
1   113				     ;		 5:[right      border]
1   114				     ;		 6:[left  down corner]
Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 3
drawreg.asm



1   115				     ;		 7:[bottom     border]
1   116				     ;		 8:[right down corner]
1   117				     ;
1   118				     ;OUTPUTS:	 None
1   119				     ;DESTROYS:	 bx, cx, di, bp, al, dx
1   120				     ;--------------------------------
1   121	0175			     DrawFrame	 proc
1   122	0175  80 EA 02			 sub dl, 2	     ;now we don`t consider the	1-st and the last symbol, because them we   +
    123				     will put without loops
1   124	0178  80 EE 02			 sub dh, 2	     ;the same reason
1   125
1   126	017B  8B FD			 mov di, bp
1   127	017D  2E: 8A 04			 mov al, cs:[si	+ 0]
1   128	0180  2E: 8A 5C	01		 mov bl, cs:[si	+ 1]
1   129	0184  2E: 8A 7C	02		 mov bh, cs:[si	+ 2]
1   130	0188  33 C9			 xor cx, cx	     ;
1   131	018A  8A CA			 mov cl, dl	     ;cx = dl
1   132	018C  E8 003A			 call PutFrameLine   ;draw the first line
1   133
1   134	018F  81 C5 00A0		 add bp, 160d	     ;go to the	next line
1   135
1   136	0193  2E: 8A 5C	04		 mov bl, cs:[si	+ 4]
1   137	0197  2E: 8A 7C	05		 mov bh, cs:[si	+ 5]
1   138	019B				 __next:
1   139	019B  8B FD			     mov di, bp
1   140	019D  2E: 8A 44	03		     mov al, cs:[si + 3]    ;rewrite in	the loop because in PutFrameLine al destroys
1   141	01A1  33 C9			     xor cx, cx		 ;
1   142	01A3  8A CA			     mov cl, dl		 ;cx = dl
1   143	01A5  E8 0021			     call PutFrameLine	 ;draw all middle lines
1   144	01A8  81 C5 00A0		     add bp, 160d	 ;go to	the next line
1   145
1   146	01AC  FE CE			     dec dh		 ;dh--
1   147	01AE  80 FE 00			     cmp dh, 0
1   148	01B1  75 E8			     jne __next		 ;while(dh!=0)
1   149
1   150	01B3  8B FD			 mov di, bp
1   151	01B5  2E: 8A 44	06		 mov al, cs:[si	+ 6]
1   152	01B9  2E: 8A 5C	07		 mov bl, cs:[si	+ 7]
1   153	01BD  2E: 8A 7C	08		 mov bh, cs:[si	+ 8]
1   154	01C1  33 C9			 xor cx, cx	     ;
1   155	01C3  8A CA			 mov cl, dl	     ;cx = dl
1   156	01C5  E8 0001			 call PutFrameLine   ;draw the first line
1   157
1   158	01C8  C3			 ret
1   159	01C9					 endp
1   160
1   161				     ;--------------------------------
1   162				     ;PutFrameLine
1   163				     ;--------------------------------
1   164				     ;EXPECTS:	 es -> videomemory segment
1   165				     ;		 cld
1   166				     ;INPUTS:	 di - offset in	videomemory
1   167				     ;		 ah - color atr	of the symbols
1   168				     ;		 al - ASCII code of the	1-st symbol
1   169				     ;		 bl - ASCII code of cx middle symbols
1   170				     ;		 bh - ASCII code of the	last symbol
1   171				     ;		 cx - numbers of middle	symbols
Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 4
drawreg.asm



1   172				     ;
1   173				     ;OUTPUTS:	 None
1   174				     ;DESTROYS:	 di, al, cx
1   175				     ;--------------------------------
1   176	01C9			     PutFrameLine    proc
1   177	01C9  FC			 cld	     ;ToDo remove
1   178	01CA  AB			 stosw	     ;put the fisrt symbol
1   179
1   180	01CB  8A C3			 mov al, bl  ;change putting simdol to middle symbol
1   181	01CD  F3> AB			 rep stosw   ;put all middle symbols
1   182
1   183	01CF  8A C7			 mov al, bh  ;change putting simdol to the last	symbol
1   184	01D1  AB			 stosw
1   185
1   186	01D2  C3			 ret
1   187	01D3					     endp
1   188				     ;--------------------------------
1   189
1   190				     ;--------------------------------
1   191				     ;EXPECTS:	 es->videomemory
1   192				     ;
1   193				     ;INPUTS:	 bx - offset in	vmem
1   194				     ;			 ah - color atr	for reg
1   195				     ;		 dh - color atr	for numbers
1   196				     ;
1   197				     ;DESTROYS:	 bx, di, cx
1   198				     ;--------------------------------
1   199	01D3			     DrawRegText proc
1   200	01D3  33 FF			 xor di, di	     ;di = 0
1   201	01D5  BF 01F1r			 lea di, cs:RegText
1   202	01D8  B9 000B			 mov cx, 11d	     ;length of	text
1   203
1   204	01DB				 __loop:
1   205	01DB  2E: 8A 05			     mov al, cs:[di]
1   206	01DE  26: 89 07			     mov es:[bx], ax
1   207	01E1  47			     inc di
1   208
1   209	01E2  2E: 8A 05			     mov al, cs:[di]
1   210	01E5  26: 89 47	02		     mov es:[bx+2], ax
1   211
1   212	01E9  81 C3 00A0		     add bx, 160d
1   213	01ED  47			     inc di
1   214	01EE  E2 EB			     loop __loop
1   215	01F0  C3			 ret
1   216
1   217	01F1			     endp DrawRegText
1   218				     ;--------------------------------
1   219	01F1  61 78 62 78 63 78	64+  RegText: db 'ax','bx','cx','dx','si','di','bp','sp','ds','es','ss'
    220	      78 73 69 64 69 62	70+
    221	      73 70 64 73 65 73	73+
    222	      73
1   223				     ;--------------------------------
1   224				     ;EXPECTS:	 es->videomemory
1   225				     ;
1   226				     ;INPUTS:	 bx - offset in	vmem
1   227				     ;		 dh - color atr	for numbers
1   228				     ;		Stack:	 ax	 <--top
Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 5
drawreg.asm



1   229				     ;			 bx
1   230				     ;			 cx
1   231				     ;			 dx
1   232				     ;			 si
1   233				     ;			 di
1   234				     ;			 bp
1   235				     ;			 sp
1   236				     ;			 ds
1   237				     ;			 es
1   238				     ;			 ss
1   239				     ;
1   240				     ;DESTROYS:	 ax, di, bx, cx, si, bp
1   241				     ;--------------------------------
1   242	0207			     DrawRegNumber proc
1   243	0207  5D			 pop bp			 ;save return address
1   244	0208  BF 000B			 mov di, 11d
1   245	020B				 __next:
1   246	020B  58			     pop ax
1   247	020C  E8 0071			     call OutputNum16
1   248	020F  83 C3 08			     add bx, 8d		 ;horisontal offset
1   249	0212  81 C3 00A0		     add bx, 160d	 ;vertical   offset
1   250
1   251	0216  4F			     dec di
1   252	0217  83 FF 00			     cmp di, 0
1   253	021A  75 EF			     jne __next
1   254	021C  55			 push bp		 ;recover return addres
1   255	021D  C3			 ret
1   256
1   257	021E			     endp DrawRegNumber
1   258				     ;--------------------------------
1   259
1   260
1   261	021E			     .data
1   262				     ;		 0:[left  up   corner]
1   263				     ;		 1:[up	       border]
1   264				     ;		 2:[right up   corner]
1   265				     ;		 3:[left       border]
1   266				     ;		 4:[symbol to fill frame]
1   267				     ;		 5:[right      border]
1   268				     ;		 6:[left  down corner]
1   269				     ;		 7:[bottom     border]
1   270				     ;		 8:[right down corner]
1   271
1   272	0000  DA C4 BF 7C 20 7C	C0+  single_frame db 0dah, 0c4h, 0bfh, '|',  ' ', '|',	0c0h, '-',  0d9h
    273	      2D D9
1   274
1   275	0009  C9 CD BB BA 20 BA	C8+  double_frame db 0c9h, 0cdh, 0bbh, 0bah, ' ', 0bah,	0c8h, 0cdh, 0bch
    276	      CD BC
1   277
1   278	0012  09*(20)		     empty_frame db 9 dup(' ')
    279				     include SMALLIB.ASM
1   280	001B			     .code
1   281				     locals __
1   282
1   283				     ;-------------------------------------------
1   284				     ;Put number in dec	form in	videomem
1   285				     ;
Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 6
drawreg.asm



1   286				     ;Expects:	     es->Videomem
1   287				     ;
1   288				     ;Entry(Stack, reverse getting params):
1   289				     ;			     1st arg - offset in videomem
1   290				     ;			     2nd arg - number for output
1   291				     ;			     3rd arg - color atr for output
1   292				     ;
1   293				     ;Output:	     None
1   294				     ;
1   295				     ;Destroys:	     cx, ax, dx, bx, di, si
1   296				     ;
1   297				     ;-------------------------------------------
1   298	021E			     GigaOutputNum10 proc
1   299	021E  55			     push bp		     ;save old bp
1   300	021F  8B EC			     mov bp, sp
1   301
1   302	0221  8B 5E 04			     mov bx, [bp + 4];get memory offset
1   303	0224  8B 46 06			     mov ax, [bp + 6];get number to output
1   304	0227  8B 4E 08			     mov cx, [bp + 8];get color	atribute
1   305
1   306	022A  D1 E1 D1 E1 D1 E1	D1+	     shl cx, 8		     ;put color	atribute in ch
    307	      E1 D1 E1 D1 E1 D1	E1+
    308	      D1 E1
1   309	023A  E8 0026			     call OutputNum10
1   310
1   311	023D  5D			     pop bp		     ;restore old bp value
1   312	023E  C3			     ret
1   313	023F							     endp
1   314
1   315				     ;-------------------------------------------
1   316				     ;Get number from cmd
1   317				     ;-------------------------------------------
1   318				     ;Expects:	     label named buffer
1   319				     ;
1   320				     ;Entry:	     None
1   321				     ;
1   322				     ;Output:	     ax	- number
1   323				     ;
1   324				     ;Destroys:	     cx, dx, di
1   325				     ;
1   326				     ;-------------------------------------------
1   327	023F			     GetNum  proc
1   328
1   329	023F  BA 002Br			     lea dx, buffer
1   330	0242  B4 0A			     mov ah, 0ah
1   331	0244  CD 21			     int 21h		     ;get number from cml
1   332
1   333	0246  33 C9			     xor cx, cx
1   334	0248  8A 0E 002Cr		     mov cl, buffer[1]	     ;get length of number
1   335
1   336	024C  33 C0			     xor ax, ax
1   337	024E  BF 000A			     mov di, 10d
1   338	0251  BE 0002			     mov si, 2h
1   339
1   340	0254				     __Next:
1   341	0254  F7 E7				     mul di			     ;ax = ax*10
1   342	0256  8A 94 002Br			     mov dl, si	+ buffer     ;put in dl	next simbol
Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 7
drawreg.asm



1   343	025A  80 EA 30				     sub dl, '0'		     ;convert simbol to	number
1   344
1   345	025D  03 C2				     add ax, dx		     ;ax += dh
1   346
1   347	025F  46				     inc si
1   348	0260  E2 F2				     loop __Next
1   349	0262  C3			     ret
1   350	0263				     endp
1   351
1   352				     ;-------------------------------------------
1   353
1   354				     ;-------------------------------------------
1   355				     ;Put number in dec	form in	videomem
1   356				     ;
1   357				     ;Expects:	     es->Videomem
1   358				     ;
1   359				     ;Entry:	     bx	- offset in videomem
1   360				     ;			     ax	- number for output
1   361				     ;			     ch	- color	atr for	output
1   362				     ;
1   363				     ;Output:	     None
1   364				     ;
1   365				     ;Destroys:	     ax, dx, bx, di, si
1   366				     ;
1   367				     ;-------------------------------------------
1   368	0263			     OutputNum10     proc
1   369	0263  BE 0005			     mov si, 5			     ;max length of number
1   370	0266  BF 000A			     mov di, 10d
1   371
1   372	0269				     __next:
1   373	0269  33 D2				     xor dx, dx			     ;dx = 0
1   374	026B  F7 F7				     div di			     ;ax = dxax/10
1   375											     ;dx = ax%10
1   376
1   377	026D  80 C2 30				     add dl, '0'		     ;make symbol from num
1   378	0270  8A F5				     mov dh, ch			     ;set color
1   379
1   380	0272  26: 89 57	FE			     mov word ptr es:[bx-2], dx	     ;put symbol in vmem
1   381	0276  83 EB 02				     sub bx, 2
1   382
1   383	0279  4E				     dec si
1   384	027A  83 FE 00				     cmp si, 0
1   385	027D  75 EA				     jne __next				     ;for(int si = 5; si != 0; si--)
1   386	027F  C3			     ret
1   387	0280				     endp
1   388
1   389				     ;----------------------------------------------
1   390				     ;Put number in hex	form in	videomem
1   391				     ;
1   392				     ;Expects:	     es->VideoMem
1   393				     ;
1   394				     ;Entry:	     bx	- offset in videomem
1   395				     ;			     ax	- number to output
1   396				     ;			     dh	- color	atr to output
1   397				     ;
1   398				     ;Output:	     None
1   399				     ;
Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 8
drawreg.asm



1   400				     ;Destroys:	     ax, dx, bx, cx, si
1   401				     ;
1   402				     ;----------------------------------------------
1   403	0280			     OutputNum16     proc
1   404	0280  B9 0004			     mov cx, 4				     ;length of	hex number
1   405	0283				     __Next:				     ;do
1   406	0283  BE 000F				     mov si, 000fh
1   407	0286  23 F0				     and si, ax					     ;get new number
1   408
1   409	0288  2E: 8A 94	001Br			     mov dl, cs:[offset	int_to_char_hex[si]] ;make char	from int
1   410
1   411	028D  26: 89 57	FE			     mov word ptr es:[bx-2], dx	     ;put symb in vmem
1   412	0291  83 EB 02				     sub bx, 2					     ;bx -= 2
1   413
1   414	0294  D1 C8 D1 C8 D1 C8	D1+		     ror ax, 4					     ;roll in the right	to 4 bytes
    415	      C8
1   416	029C  E2 E5				     loop __Next
1   417
1   418	029E  C3			     ret
1   419	029F				     endp
1   420
1   421	029F			     .data
1   422	001B  30 31 32 33 34 35	36+	     int_to_char_hex db	"0123456789ABCDEF"
    423	      37 38 39 41 42 43	44+
    424	      45 46
1   425
1   426	002B			     .code
1   427				     ;----------------------------------------------
1   428
1   429				     ;----------------------------------------------
1   430				     ;Put number in binary form	in videomem
1   431				     ;
1   432				     ;Expects:	     es->VideoMem
1   433				     ;
1   434				     ;Entry: bx	- offset in videomem
1   435				     ;		     ax	- number to output
1   436				     ;		     dh	- color	atr to output
1   437				     ;
1   438				     ;Output:	     None
1   439				     ;
1   440				     ;Destroys:	     ax, bx,cx,	dl
1   441				     ;----------------------------------------------
1   442	029F			     OutputNum2	     proc
1   443
1   444	029F  B9 0010			     mov cx, 10h	     ;set number of bits in number
1   445
1   446	02A2				     __Next:
1   447	02A2  B2 01				     mov dl, 1
1   448	02A4  22 D0				     and dl, al			     ;get last number
1   449	02A6  80 C2 30				     add dl, '0'		     ;make char	from number
1   450
1   451	02A9  D1 C8				     ror ax, 1
1   452	02AB  26: 89 17				     mov word ptr es:[bx], dx	     ;print 1 or 0
1   453
1   454	02AE  83 C3 02				     add bx, 2
1   455	02B1  E2 EF				     loop __Next
1   456
Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 9
drawreg.asm



1   457	02B3  C3			     ret
1   458	02B4				     endp
1   459				     ;----------------------------------------------
1   460
1   461	02B4			     .data
1   462	002B  05 ?? 05*(20)		     buffer db 5, ?, 5 dup(' ')
    463
    464	0032			     EOP:
    465
    466	0032			     Main:
    467
    468
    469	0032  33 DB			     xor bx, bx								     ;
    470	0034  8E C3			     mov es, bx								     ;es = 0
    471	0036  BB 0024			     mov bx, 4*9							     ;Set es:[bx] to+
    472				     int table ot 9-th interruption
    473
    474	0039  26: 8B 07			     mov ax, word ptr es:[bx]				     ;
    475	003C  A3 016Fr			     mov word ptr [Old09Offset], ax		     ;
    476	003F  26: 8B 47	02		     mov ax, word ptr es:[bx+2]				     ;
    477	0043  A3 0171r			     mov word ptr [Old90Segment], ax		     ;save address of old interruption	    +
    478				     handler
    479
    480	0046  FA			     cli
    481	0047  26: C7 07	0103r		     mov es:[bx], offset NewInt09		     ;
    482	004C  8C C8			     mov ax, cs								     ;
    483	004E  26: 89 47	02		     mov es:[bx+2], ax						     ;Put in int table new  +
    484				     9th int
    485	0052  FB			     sti
    486
    487	0053  B8 3100			     mov ax, 3100h
    488	0056  BA 0032r			     mov dx, offset EOP
    489	0059  D1 EA D1 EA D1 EA	D1+	     shr dx, 4								     ;Convert to    +
    490	      EA		     paragraphs
    491	0061  42			     inc dx								     ;Round up
    492	0062  CD 21			     int 21h								     ;End program   +
    493				     with saving code of new int in memory
    494
    495				     end Start
Turbo Assembler	 Version 4.1	    03/02/23 22:06:07	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/02/23"
??FILENAME			  Text	 "drawreg "
??TIME				  Text	 "22:06:06"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 DRAWREG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUFFER				  Byte	 DGROUP:002B
DOUBLE_FRAME			  Byte	 DGROUP:0009
DRAWFRAME			  Near	 DGROUP:0175
DRAWREGNUMBER			  Near	 DGROUP:0207
DRAWREGTEXT			  Near	 DGROUP:01D3
EMPTY_FRAME			  Byte	 DGROUP:0012
EOP				  Near	 DGROUP:0032
GETNUM				  Near	 DGROUP:023F
GIGAOUTPUTNUM10			  Near	 DGROUP:021E
INT_TO_CHAR_HEX			  Byte	 DGROUP:001B
IS_FRAME_VISIBLE		  Near	 DGROUP:0173
MAIN				  Near	 DGROUP:0032
NEWINT09			  Near	 DGROUP:0103
OLD09OFFSET			  Word	 DGROUP:016F
OLD90SEGMENT			  Word	 DGROUP:0171
OUTPUTNUM10			  Near	 DGROUP:0263
OUTPUTNUM16			  Near	 DGROUP:0280
OUTPUTNUM2			  Near	 DGROUP:029F
PUTFRAMELINE			  Near	 DGROUP:01C9
REGTEXT				  Near	 DGROUP:01F1
SINGLE_FRAME			  Byte	 DGROUP:0000
START				  Near	 DGROUP:0100
__CLEAR_FRAME			  Near	 DGROUP:0159
__END_DRAW_FRAME		  Near	 DGROUP:0166
__LOOP				  Near	 DGROUP:01DB
__NEXT				  Near	 DGROUP:019B
__NEXT				  Near	 DGROUP:020B
__NEXT				  Near	 DGROUP:0254
__NEXT				  Near	 DGROUP:0269
__NEXT				  Near	 DGROUP:0283
__NEXT				  Near	 DGROUP:02A2

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0064 Word	  Public  DATA
  _TEXT				  16  02B4 Word	  Public  CODE
