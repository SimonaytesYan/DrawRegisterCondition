Turbo Assembler	 Version 4.1	    03/02/23 20:01:03	    Page 1
drawreg.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     org 100h
      4				     locals __
      5
      6	0100  E9 0032r		     Start:  jmp Main
      7
      8	0103			     NewInt09	     proc
      9	0103  06			     push es					     ;
     10	0104  53			     push bx					     ;
     11	0105  52			     push dx					     ;
     12	0106  50			     push ax					     ;
     13	0107  56			     push si					     ;
     14	0108  51			     push cx					     ;
     15	0109  55			     push bp					     ;
     16	010A  57			     push di					     ;save regs
     17
     18	010B  E4 60			     in	al, 60h					     ;get scan-code from 60-th pin
     19	010D  3C 2B			     cmp al, 43d				     ;\	or | buttons
     20
     21	010F  75 3C			     jne __end_draw_frame
     22	0111  BB B800				     mov bx, 0b800h			     ;<----------------------|
     23	0114  8E C3				     mov es, bx					     ;				    +
     24				     |
     25	0116  BD 01C6				     mov bp, 2*160d+134d		     ;offset in	vmem		     |
     26	0119  B6 0F				     mov dh, 15d				     ;height of	the frame    |	    +
     27				     ARGUMENTS TO DRAW FRAME
     28	011B  B2 07				     mov dl, 7d					     ;weight of	the frame    |
     29	011D  B4 7E				     mov ah, 07eh			     ;color atr	     <-------|
     30
     31	011F  33 DB				     xor bx, bx
     32	0121  BB 015Ar				     lea bx, cs:is_frame_visible						    +
     33				     ;put in bx	offset of the labal is_frame_visible
     34	0124  2E: 8B 0F				     mov word ptr cx, cs:[bx]							    +
     35				     ;put in cx	status is_frame_visible
     36	0127  83 F9 01				     cmp cx, 1
     37
     38	012A  74 14				     je	__clear_frame
     39	012C  BE 0009r					     mov si, cs:[offset	double_frame]					    +
     40				     ;symbols to frame
     41	012F  2E: C7 07	0001				     mov word ptr cs:[bx], 1d						    +
     42				     ;set new status
     43	0134  E8 0025					     call DrawFrame
     44
     45	0137  BB 0268					     mov bx, 3*160d+136d
     46	013A  E8 007D					     call DrawReg
     47
     48	013D  EB 0E 90					     jmp __end_draw_frame
     49	0140					     __clear_frame:
     50	0140  B4 01					     mov ah, 1d
     51	0142  BE 0012r					     mov si, cs:[offset	empty_frame]					    +
     52				     ;symbols to frame
     53	0145  2E: C7 07	0000				     mov word ptr cs:[bx], 0d						    +
     54				     ;set new status
     55	014A  E8 000F					     call DrawFrame
     56
     57	014D			     __end_draw_frame:
Turbo Assembler	 Version 4.1	    03/02/23 20:01:03	    Page 2
drawreg.asm



     58	014D  5F			     pop di					     ;
     59	014E  5D			     pop bp					     ;
     60	014F  59			     pop cx					     ;
     61	0150  5E			     pop si					     ;
     62	0151  58			     pop ax					     ;
     63	0152  5A			     pop dx					     ;
     64	0153  5B			     pop bx					     ;
     65	0154  07			     pop es					     ;recover value of registers
     66
     67	0155  EA			     db	 0eah					     ;make jmp far
     68	0156  0000		     Old09Offset	     dw	0		     ;jmp offset
     69	0158  0000		     Old90Segment    dw	0		     ;jmp segment
     70
     71	015A			     endp NewInt09
     72
     73	015A  0000		     is_frame_visible: dw 0
     74
     75				     include FRAME.ASM
1    76
1    77				     ;--------------------------------
1    78				     ;EXPECTS:	 es->videomemory
1    79				     ;INPUTS:	 bp - offset in	vmem
1    80				     ;			 dh - height of	frame
1    81				     ;			 dl - weight of	frame
1    82				     ;			 ah - color atr
1    83				     ;		 si - pointer to array with 9 symbols to draw frame in format:
1    84				     ;		 0:[left  up   corner]
1    85				     ;		 1:[up	       border]
1    86				     ;		 2:[right up   corner]
1    87				     ;		 3:[left       border]
1    88				     ;		 4:[symbol to fill frame]
1    89				     ;		 5:[right      border]
1    90				     ;		 6:[left  down corner]
1    91				     ;		 7:[bottom     border]
1    92				     ;		 8:[right down corner]
1    93				     ;
1    94				     ;OUTPUTS:	 None
1    95				     ;DESTROYS:	 bx, cx, di, bp, al, dx
1    96				     ;--------------------------------
1    97	015C			     DrawFrame	 proc
1    98	015C  80 EA 02			 sub dl, 2	     ;now we don`t consider the	1-st and the last symbol, because them we   +
     99				     will put without loops
1   100	015F  80 EE 02			 sub dh, 2	     ;the same reason
1   101
1   102	0162  8B FD			 mov di, bp
1   103	0164  2E: 8A 04			 mov al, cs:[si	+ 0]
1   104	0167  2E: 8A 5C	01		 mov bl, cs:[si	+ 1]
1   105	016B  2E: 8A 7C	02		 mov bh, cs:[si	+ 2]
1   106	016F  33 C9			 xor cx, cx	     ;
1   107	0171  8A CA			 mov cl, dl	     ;cx = dl
1   108	0173  E8 003A			 call PutFrameLine   ;draw the first line
1   109
1   110	0176  81 C5 00A0		 add bp, 160d	     ;go to the	next line
1   111
1   112	017A  2E: 8A 5C	04		 mov bl, cs:[si	+ 4]
1   113	017E  2E: 8A 7C	05		 mov bh, cs:[si	+ 5]
1   114	0182				 __next:
Turbo Assembler	 Version 4.1	    03/02/23 20:01:03	    Page 3
drawreg.asm



1   115	0182  8B FD			     mov di, bp
1   116	0184  2E: 8A 44	03		     mov al, cs:[si + 3]    ;rewrite in	the loop because in PutFrameLine al destroys
1   117	0188  33 C9			     xor cx, cx		 ;
1   118	018A  8A CA			     mov cl, dl		 ;cx = dl
1   119	018C  E8 0021			     call PutFrameLine	 ;draw all middle lines
1   120	018F  81 C5 00A0		     add bp, 160d	 ;go to	the next line
1   121
1   122	0193  FE CE			     dec dh		 ;dh--
1   123	0195  80 FE 00			     cmp dh, 0
1   124	0198  75 E8			     jne __next		 ;while(dh!=0)
1   125
1   126	019A  8B FD			 mov di, bp
1   127	019C  2E: 8A 44	06		 mov al, cs:[si	+ 6]
1   128	01A0  2E: 8A 5C	07		 mov bl, cs:[si	+ 7]
1   129	01A4  2E: 8A 7C	08		 mov bh, cs:[si	+ 8]
1   130	01A8  33 C9			 xor cx, cx	     ;
1   131	01AA  8A CA			 mov cl, dl	     ;cx = dl
1   132	01AC  E8 0001			 call PutFrameLine   ;draw the first line
1   133
1   134	01AF  C3			 ret
1   135	01B0					 endp
1   136
1   137				     ;--------------------------------
1   138				     ;PutFrameLine
1   139				     ;--------------------------------
1   140				     ;EXPECTS:	 es -> videomemory segment
1   141				     ;		 cld
1   142				     ;INPUTS:	 di - offset in	videomemory
1   143				     ;		 ah - color atr	of the symbols
1   144				     ;		 al - ASCII code of the	1-st symbol
1   145				     ;		 bl - ASCII code of cx middle symbols
1   146				     ;		 bh - ASCII code of the	last symbol
1   147				     ;		 cx - numbers of middle	symbols
1   148				     ;
1   149				     ;OUTPUTS:	 None
1   150				     ;DESTROYS:	 di, al, cx
1   151				     ;--------------------------------
1   152	01B0			     PutFrameLine    proc
1   153	01B0  FC			 cld	     ;ToDo remove
1   154	01B1  AB			 stosw	     ;put the fisrt symbol
1   155
1   156	01B2  8A C3			 mov al, bl  ;change putting simdol to middle symbol
1   157	01B4  F3> AB			 rep stosw   ;put all middle symbols
1   158
1   159	01B6  8A C7			 mov al, bh  ;change putting simdol to the last	symbol
1   160	01B8  AB			 stosw
1   161
1   162	01B9  C3			 ret
1   163	01BA					     endp
1   164				     ;--------------------------------
1   165
1   166
1   167				     ;--------------------------------
1   168				     ;EXPECTS:	 es->videomemory
1   169				     ;INPUTS:	 bx - offset in	vmem
1   170				     ;			 ah - color atr
1   171				     ;DESTROYS:	 bx, di, cx
Turbo Assembler	 Version 4.1	    03/02/23 20:01:03	    Page 4
drawreg.asm



1   172				     ;--------------------------------
1   173	01BA			     DrawReg proc
1   174	01BA  33 FF			 xor di, di	     ;di = 0
1   175	01BC  BF 01D8r			 lea di, cs:RegText
1   176	01BF  B9 000D			 mov cx, 13d	     ;length of	text
1   177
1   178	01C2				 __loop:
1   179	01C2  2E: 8A 05			     mov al, cs:[di]
1   180	01C5  26: 89 07			     mov es:[bx], ax
1   181	01C8  47			     inc di
1   182
1   183	01C9  2E: 8A 05			     mov al, cs:[di]
1   184	01CC  26: 89 47	02		     mov es:[bx+2], ax
1   185
1   186	01D0  81 C3 00A0		     add bx, 160d
1   187	01D4  47			     inc di
1   188	01D5  E2 EB			     loop __loop
1   189
1   190	01D7  C3			 ret
1   191
1   192	01D8			     endp DrawReg
1   193				     ;--------------------------------
1   194
1   195	01D8  61 78 62 78 63 78	64+  RegText: db 'ax','bx','cx','dx','si','di','bp','sp','ds','es','ss','cs','ip'
    196	      78 73 69 64 69 62	70+
    197	      73 70 64 73 65 73	73+
    198	      73 63 73 69 70
1   199
1   200	01F2			     .data
1   201				     ;		 0:[left  up   corner]
1   202				     ;		 1:[up	       border]
1   203				     ;		 2:[right up   corner]
1   204				     ;		 3:[left       border]
1   205				     ;		 4:[symbol to fill frame]
1   206				     ;		 5:[right      border]
1   207				     ;		 6:[left  down corner]
1   208				     ;		 7:[bottom     border]
1   209				     ;		 8:[right down corner]
1   210
1   211	0000  DA C4 BF 7C 20 7C	C0+  single_frame db 0dah, 0c4h, 0bfh, '|',  ' ', '|',	0c0h, '-',  0d9h
    212	      2D D9
1   213
1   214	0009  C9 CD BB BA 20 BA	C8+  double_frame db 0c9h, 0cdh, 0bbh, 0bah, ' ', 0bah,	0c8h, 0cdh, 0bch
    215	      CD BC
1   216
1   217	0012  09*(20)		     empty_frame db 9 dup(' ')
    218				     include SMALLIB.ASM
1   219	001B			     .code
1   220				     locals __
1   221
1   222				     ;-------------------------------------------
1   223				     ;Put number in dec	form in	videomem
1   224				     ;
1   225				     ;Expects:	     es->Videomem
1   226				     ;
1   227				     ;Entry(Stack, reverse getting params):
1   228				     ;			     1st arg - offset in videomem
Turbo Assembler	 Version 4.1	    03/02/23 20:01:03	    Page 5
drawreg.asm



1   229				     ;			     2nd arg - number for output
1   230				     ;			     3rd arg - color atr for output
1   231				     ;
1   232				     ;Output:	     None
1   233				     ;
1   234				     ;Destroys:	     cx, ax, dx, bx, di, si
1   235				     ;
1   236				     ;-------------------------------------------
1   237	01F2			     GigaOutputNum10 proc
1   238	01F2  55			     push bp		     ;save old bp
1   239	01F3  8B EC			     mov bp, sp
1   240
1   241	01F5  8B 5E 04			     mov bx, [bp + 4];get memory offset
1   242	01F8  8B 46 06			     mov ax, [bp + 6];get number to output
1   243	01FB  8B 4E 08			     mov cx, [bp + 8];get color	atribute
1   244
1   245	01FE  D1 E1 D1 E1 D1 E1	D1+	     shl cx, 8		     ;put color	atribute in ch
    246	      E1 D1 E1 D1 E1 D1	E1+
    247	      D1 E1
1   248	020E  E8 0026			     call OutputNum10
1   249
1   250	0211  5D			     pop bp		     ;restore old bp value
1   251	0212  C3			     ret
1   252	0213							     endp
1   253
1   254				     ;-------------------------------------------
1   255				     ;Get number from cmd
1   256				     ;-------------------------------------------
1   257				     ;Expects:	     label named buffer
1   258				     ;
1   259				     ;Entry:	     None
1   260				     ;
1   261				     ;Output:	     ax	- number
1   262				     ;
1   263				     ;Destroys:	     cx, dx, di
1   264				     ;
1   265				     ;-------------------------------------------
1   266	0213			     GetNum  proc
1   267
1   268	0213  BA 002Br			     lea dx, buffer
1   269	0216  B4 0A			     mov ah, 0ah
1   270	0218  CD 21			     int 21h		     ;get number from cml
1   271
1   272	021A  33 C9			     xor cx, cx
1   273	021C  8A 0E 002Cr		     mov cl, buffer[1]	     ;get length of number
1   274
1   275	0220  33 C0			     xor ax, ax
1   276	0222  BF 000A			     mov di, 10d
1   277	0225  BE 0002			     mov si, 2h
1   278
1   279	0228				     __Next:
1   280	0228  F7 E7				     mul di			     ;ax = ax*10
1   281	022A  8A 94 002Br			     mov dl, si	+ buffer     ;put in dl	next simbol
1   282	022E  80 EA 30				     sub dl, '0'		     ;convert simbol to	number
1   283
1   284	0231  03 C2				     add ax, dx		     ;ax += dh
1   285
Turbo Assembler	 Version 4.1	    03/02/23 20:01:03	    Page 6
drawreg.asm



1   286	0233  46				     inc si
1   287	0234  E2 F2				     loop __Next
1   288	0236  C3			     ret
1   289	0237				     endp
1   290
1   291				     ;-------------------------------------------
1   292
1   293				     ;-------------------------------------------
1   294				     ;Put number in dec	form in	videomem
1   295				     ;
1   296				     ;Expects:	     es->Videomem
1   297				     ;
1   298				     ;Entry:	     bx	- offset in videomem
1   299				     ;			     ax	- number for output
1   300				     ;			     ch	- color	atr for	output
1   301				     ;
1   302				     ;Output:	     None
1   303				     ;
1   304				     ;Destroys:	     ax, dx, bx, di, si
1   305				     ;
1   306				     ;-------------------------------------------
1   307	0237			     OutputNum10     proc
1   308	0237  BE 0005			     mov si, 5			     ;max length of number
1   309	023A  BF 000A			     mov di, 10d
1   310
1   311	023D				     __next:
1   312	023D  33 D2				     xor dx, dx			     ;dx = 0
1   313	023F  F7 F7				     div di			     ;ax = dxax/10
1   314											     ;dx = ax%10
1   315
1   316	0241  80 C2 30				     add dl, '0'		     ;make symbol from num
1   317	0244  8A F5				     mov dh, ch			     ;set color
1   318
1   319	0246  26: 89 57	FE			     mov word ptr es:[bx-2], dx	     ;put symbol in vmem
1   320	024A  83 EB 02				     sub bx, 2
1   321
1   322	024D  4E				     dec si
1   323	024E  83 FE 00				     cmp si, 0
1   324	0251  75 EA				     jne __next				     ;for(int si = 5; si != 0; si--)
1   325	0253  C3			     ret
1   326	0254				     endp
1   327
1   328				     ;----------------------------------------------
1   329				     ;Put number in hex	form in	videomem
1   330				     ;
1   331				     ;Expects:	     es->VideoMem
1   332				     ;
1   333				     ;Entry:	     bx	- offset in videomem
1   334				     ;			     ax	- number to output
1   335				     ;			     dh	- color	atr to output
1   336				     ;
1   337				     ;Output:	     None
1   338				     ;
1   339				     ;Destroys:	     ax, dx, bx, cx, si
1   340				     ;
1   341				     ;----------------------------------------------
1   342	0254			     OutputNum16     proc
Turbo Assembler	 Version 4.1	    03/02/23 20:01:03	    Page 7
drawreg.asm



1   343	0254  B9 0004			     mov cx, 4				     ;length of	hex number
1   344	0257				     __Next:				     ;do
1   345	0257  BE 000F				     mov si, 000fh
1   346	025A  23 F0				     and si, ax					     ;get new number
1   347
1   348	025C  2E: 8A 94	001Br			     mov dl, cs:[offset	int_to_char_hex[si]] ;make char	from int
1   349
1   350	0261  26: 89 57	FE			     mov word ptr es:[bx-2], dx	     ;put symb in vmem
1   351	0265  83 EB 02				     sub bx, 2					     ;bx -= 2
1   352
1   353	0268  D1 C8 D1 C8 D1 C8	D1+		     ror ax, 4					     ;roll in the right	to 4 bytes
    354	      C8
1   355	0270  E2 E5				     loop __Next
1   356
1   357	0272  C3			     ret
1   358	0273				     endp
1   359
1   360	0273			     .data
1   361	001B  30 31 32 33 34 35	36+	     int_to_char_hex db	"0123456789ABCDEF"
    362	      37 38 39 41 42 43	44+
    363	      45 46
1   364
1   365	002B			     .code
1   366				     ;----------------------------------------------
1   367
1   368				     ;----------------------------------------------
1   369				     ;Put number in binary form	in videomem
1   370				     ;
1   371				     ;Expects:	     es->VideoMem
1   372				     ;
1   373				     ;Entry: bx	- offset in videomem
1   374				     ;		     ax	- number to output
1   375				     ;		     dh	- color	atr to output
1   376				     ;
1   377				     ;Output:	     None
1   378				     ;
1   379				     ;Destroys:	     ax, bx,cx,	dl
1   380				     ;----------------------------------------------
1   381	0273			     OutputNum2	     proc
1   382
1   383	0273  B9 0010			     mov cx, 10h	     ;set number of bits in number
1   384
1   385	0276				     __Next:
1   386	0276  B2 01				     mov dl, 1
1   387	0278  22 D0				     and dl, al			     ;get last number
1   388	027A  80 C2 30				     add dl, '0'		     ;make char	from number
1   389
1   390	027D  D1 C8				     ror ax, 1
1   391	027F  26: 89 17				     mov word ptr es:[bx], dx	     ;print 1 or 0
1   392
1   393	0282  83 C3 02				     add bx, 2
1   394	0285  E2 EF				     loop __Next
1   395
1   396	0287  C3			     ret
1   397	0288				     endp
1   398				     ;----------------------------------------------
1   399
Turbo Assembler	 Version 4.1	    03/02/23 20:01:03	    Page 8
drawreg.asm



1   400	0288			     .data
1   401	002B  05 ?? 05*(20)		     buffer db 5, ?, 5 dup(' ')
    402
    403	0032			     EOP:
    404
    405	0032			     Main:
    406	0032  33 DB			     xor bx, bx								     ;
    407	0034  8E C3			     mov es, bx								     ;es = 0
    408	0036  BB 0024			     mov bx, 4*9							     ;Set es:[bx] to+
    409				     int table ot 9-th interruption
    410
    411	0039  26: 8B 07			     mov ax, word ptr es:[bx]				     ;
    412	003C  A3 0156r			     mov word ptr [Old09Offset], ax		     ;
    413	003F  26: 8B 47	02		     mov ax, word ptr es:[bx+2]				     ;
    414	0043  A3 0158r			     mov word ptr [Old90Segment], ax		     ;save address of old interruption	    +
    415				     handler
    416
    417	0046  FA			     cli
    418	0047  26: C7 07	0103r		     mov es:[bx], offset NewInt09		     ;
    419	004C  8C C8			     mov ax, cs								     ;
    420	004E  26: 89 47	02		     mov es:[bx+2], ax						     ;Put in int table new  +
    421				     9th int
    422	0052  FB			     sti
    423
    424	0053  B8 3100			     mov ax, 3100h
    425	0056  BA 0032r			     mov dx, offset EOP
    426	0059  D1 EA D1 EA D1 EA	D1+	     shr dx, 4								     ;Convert to    +
    427	      EA		     paragraphs
    428	0061  42			     inc dx								     ;Round up
    429	0062  CD 21			     int 21h								     ;End program   +
    430				     with saving code of new int in memory
    431
    432				     end Start
Turbo Assembler	 Version 4.1	    03/02/23 20:01:03	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/02/23"
??FILENAME			  Text	 "drawreg "
??TIME				  Text	 "20:01:03"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 DRAWREG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUFFER				  Byte	 DGROUP:002B
DOUBLE_FRAME			  Byte	 DGROUP:0009
DRAWFRAME			  Near	 DGROUP:015C
DRAWREG				  Near	 DGROUP:01BA
EMPTY_FRAME			  Byte	 DGROUP:0012
EOP				  Near	 DGROUP:0032
GETNUM				  Near	 DGROUP:0213
GIGAOUTPUTNUM10			  Near	 DGROUP:01F2
INT_TO_CHAR_HEX			  Byte	 DGROUP:001B
IS_FRAME_VISIBLE		  Near	 DGROUP:015A
MAIN				  Near	 DGROUP:0032
NEWINT09			  Near	 DGROUP:0103
OLD09OFFSET			  Word	 DGROUP:0156
OLD90SEGMENT			  Word	 DGROUP:0158
OUTPUTNUM10			  Near	 DGROUP:0237
OUTPUTNUM16			  Near	 DGROUP:0254
OUTPUTNUM2			  Near	 DGROUP:0273
PUTFRAMELINE			  Near	 DGROUP:01B0
REGTEXT				  Near	 DGROUP:01D8
SINGLE_FRAME			  Byte	 DGROUP:0000
START				  Near	 DGROUP:0100
__CLEAR_FRAME			  Near	 DGROUP:0140
__END_DRAW_FRAME		  Near	 DGROUP:014D
__LOOP				  Near	 DGROUP:01C2
__NEXT				  Near	 DGROUP:0182
__NEXT				  Near	 DGROUP:0228
__NEXT				  Near	 DGROUP:023D
__NEXT				  Near	 DGROUP:0257
__NEXT				  Near	 DGROUP:0276

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0064 Word	  Public  DATA
  _TEXT				  16  0288 Word	  Public  CODE
