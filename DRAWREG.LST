Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 1
drawreg.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     org 100h
      4				     locals __
      5
      6	0100  E9 0032r		     Start:  jmp Main
      7
      8	0103			     NewInt08 proc
      9
     10	0103  16			     push ss					     ;
     11	0104  06			     push es					     ;
     12	0105  1E			     push ds					     ;
     13	0106  54			     push sp					     ;
     14	0107  55			     push bp					     ;
     15	0108  57			     push di					     ;
     16	0109  56			     push si					     ;
     17	010A  52			     push dx					     ;
     18	010B  51			     push cx					     ;
     19	010C  53			     push bx					     ;
     20	010D  50			     push ax					     ;save regs
     21
     22	010E  BB 019Ar			     lea bx, cs:is_frame_visible						     ;put in+
     23				     bx	offset of the label is_frame_visible
     24	0111  2E: 8B 0F			     mov word ptr cx, cs:[bx]							     ;put in+
     25				     cx	status is_frame_visible
     26	0114  83 F9 00			     cmp cx, 0
     27
     28	0117  74 22			     je	__end_draw_frame
     29	0119  BB B800				     mov bx, 0b800h
     30	011C  8E C3				     mov es, bx
     31
     32	011E  BD 01C6				     mov bp, 2*160d+134d				     ;offset in	vmem	    +
     33				     |
     34	0121  B6 0D				     mov dh, 13d						     ;height of	the +
     35				     frame    |
     36	0123  B2 09				     mov dl, 9d							     ;weight of	the +
     37				     frame    |	ARGUMENTS TO DRAW FRAME
     38	0125  B4 7E				     mov ah, 07eh					     ;color atr		    +
     39				     |
     40	0127  BE 0009r				     mov si, cs:[offset	double_frame]	     ;symbols to frame		     |
     41	012A  E8 006F				     call DrawFrame
     42
     43	012D  BB 0268				     mov bx, 3*160d+136d
     44	0130  E8 00C7				     call DrawRegText
     45
     46	0133  BB 0276				     mov bx, 3*160d+150d
     47	0136  B6 71				     mov dh, 71h
     48	0138  E8 00F3				     call DrawRegNumber
     49
     50	013B			     __end_draw_frame:
     51	013B  58			     pop ax					     ;
     52	013C  5B			     pop bx					     ;
     53	013D  59			     pop cx					     ;
     54	013E  5A			     pop dx					     ;
     55	013F  5E			     pop si					     ;
     56	0140  5F			     pop di					     ;
     57	0141  5D			     pop bp					     ;
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 2
drawreg.asm



     58	0142  5C			     pop sp					     ;
     59	0143  1F			     pop ds					     ;
     60	0144  07			     pop es					     ;
     61	0145  17			     pop ss					     ;recover value of registers
     62
     63
     64	0146  EA			     db	 0eah					     ;make jmp far
     65	0147  0000			     Old08Offset	     dw	0		     ;jmp offset
     66	0149  0000			     Old08Segment    dw	0		     ;jmp segment
     67	014B			     endp NewInt08
     68
     69	014B			     NewInt09	     proc
     70	014B  16			     push ss					     ;
     71	014C  06			     push es					     ;
     72	014D  1E			     push ds					     ;
     73	014E  54			     push sp					     ;
     74	014F  55			     push bp					     ;
     75	0150  57			     push di					     ;
     76	0151  56			     push si					     ;
     77	0152  52			     push dx					     ;
     78	0153  51			     push cx					     ;
     79	0154  53			     push bx					     ;
     80	0155  50			     push ax					     ;save regs
     81
     82	0156  E4 60			     in	al, 60h					     ;get scan-code from 60-th pin
     83	0158  3C 2B			     cmp al, 43d				     ;\	or | buttons
     84
     85	015A  75 2E			     jne __end_draw_frame
     86	015C  33 DB				     xor bx, bx
     87	015E  BB 019Ar				     lea bx, cs:is_frame_visible				     ;put in bx	    +
     88				     offset of the label is_frame_visible
     89	0161  2E: 8B 0F				     mov word ptr cx, cs:[bx]					     ;put in cx	    +
     90				     status is_frame_visible
     91	0164  83 F9 01				     cmp cx, 1
     92
     93	0167  74 08				     je	__clear_frame
     94	0169  2E: C7 07	0001				     mov word ptr cs:[bx], 1d				     ;set new status
     95	016E  EB 1A 90					     jmp __end_draw_frame
     96	0171					     __clear_frame:
     97	0171  2E: C7 07	0000				     mov word ptr cs:[bx], 0d						    +
     98				     ;set new status
     99
    100	0176  BB B800					     mov bx, 0b800h			     ;				    +
    101				     |
    102	0179  8E C3					     mov es, bx					     ;			    +
    103				     |
    104	017B  BD 01C6					     mov bp, 2*160d+134d		     ;offset in	vmem		    +
    105				     |
    106	017E  B6 0D					     mov dh, 13d				     ;height of	the frame   +
    107				     | ARGUMENTS TO DRAW FRAME
    108	0180  B2 09					     mov dl, 9d					     ;weight of	the frame   +
    109				     |
    110	0182  B4 01					     mov ah, 1d
    111
    112	0184  BE 0012r					     mov si, cs:[offset	empty_frame]					    +
    113				     ;symbols to frame
    114	0187  E8 0012					     call DrawFrame
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 3
drawreg.asm



    115
    116	018A			     __end_draw_frame:
    117	018A  58			     pop ax					     ;
    118	018B  5B			     pop bx					     ;
    119	018C  59			     pop cx					     ;
    120	018D  5A			     pop dx					     ;
    121	018E  5E			     pop si					     ;
    122	018F  5F			     pop di					     ;
    123	0190  5D			     pop bp					     ;
    124	0191  5C			     pop sp					     ;
    125	0192  1F			     pop ds					     ;
    126	0193  07			     pop es					     ;
    127	0194  17			     pop ss					     ;recover value of registers
    128
    129	0195  EA			     db	 0eah					     ;make jmp far
    130	0196  0000		     Old09Offset	     dw	0		     ;jmp offset
    131	0198  0000		     Old09Segment    dw	0		     ;jmp segment
    132
    133	019A			     endp NewInt09
    134
    135	019A  0000		     is_frame_visible: dw 0
    136
    137				     include FRAME.ASM
1   138
1   139				     ;--------------------------------
1   140				     ;EXPECTS:	 es->videomemory
1   141				     ;INPUTS:	 bp - offset in	vmem
1   142				     ;			 dh - height of	frame
1   143				     ;			 dl - weight of	frame
1   144				     ;			 ah - color atr
1   145				     ;		 si - pointer to array with 9 symbols to draw frame in format:
1   146				     ;		 0:[left  up   corner]
1   147				     ;		 1:[up	       border]
1   148				     ;		 2:[right up   corner]
1   149				     ;		 3:[left       border]
1   150				     ;		 4:[symbol to fill frame]
1   151				     ;		 5:[right      border]
1   152				     ;		 6:[left  down corner]
1   153				     ;		 7:[bottom     border]
1   154				     ;		 8:[right down corner]
1   155				     ;
1   156				     ;OUTPUTS:	 None
1   157				     ;DESTROYS:	 bx, cx, di, bp, al, dx
1   158				     ;--------------------------------
1   159	019C			     DrawFrame	 proc
1   160	019C  80 EA 02			 sub dl, 2	     ;now we don`t consider the	1-st and the last symbol, because them we   +
    161				     will put without loops
1   162	019F  80 EE 02			 sub dh, 2	     ;the same reason
1   163
1   164	01A2  8B FD			 mov di, bp
1   165	01A4  2E: 8A 04			 mov al, cs:[si	+ 0]
1   166	01A7  2E: 8A 5C	01		 mov bl, cs:[si	+ 1]
1   167	01AB  2E: 8A 7C	02		 mov bh, cs:[si	+ 2]
1   168	01AF  33 C9			 xor cx, cx	     ;
1   169	01B1  8A CA			 mov cl, dl	     ;cx = dl
1   170	01B3  E8 003A			 call PutFrameLine   ;draw the first line
1   171
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 4
drawreg.asm



1   172	01B6  81 C5 00A0		 add bp, 160d	     ;go to the	next line
1   173
1   174	01BA  2E: 8A 5C	04		 mov bl, cs:[si	+ 4]
1   175	01BE  2E: 8A 7C	05		 mov bh, cs:[si	+ 5]
1   176	01C2				 __next:
1   177	01C2  8B FD			     mov di, bp
1   178	01C4  2E: 8A 44	03		     mov al, cs:[si + 3]    ;rewrite in	the loop because in PutFrameLine al destroys
1   179	01C8  33 C9			     xor cx, cx		 ;
1   180	01CA  8A CA			     mov cl, dl		 ;cx = dl
1   181	01CC  E8 0021			     call PutFrameLine	 ;draw all middle lines
1   182	01CF  81 C5 00A0		     add bp, 160d	 ;go to	the next line
1   183
1   184	01D3  FE CE			     dec dh		 ;dh--
1   185	01D5  80 FE 00			     cmp dh, 0
1   186	01D8  75 E8			     jne __next		 ;while(dh!=0)
1   187
1   188	01DA  8B FD			 mov di, bp
1   189	01DC  2E: 8A 44	06		 mov al, cs:[si	+ 6]
1   190	01E0  2E: 8A 5C	07		 mov bl, cs:[si	+ 7]
1   191	01E4  2E: 8A 7C	08		 mov bh, cs:[si	+ 8]
1   192	01E8  33 C9			 xor cx, cx	     ;
1   193	01EA  8A CA			 mov cl, dl	     ;cx = dl
1   194	01EC  E8 0001			 call PutFrameLine   ;draw the first line
1   195
1   196	01EF  C3			 ret
1   197	01F0					 endp
1   198
1   199				     ;--------------------------------
1   200				     ;PutFrameLine
1   201				     ;--------------------------------
1   202				     ;EXPECTS:	 es -> videomemory segment
1   203				     ;		 cld
1   204				     ;INPUTS:	 di - offset in	videomemory
1   205				     ;		 ah - color atr	of the symbols
1   206				     ;		 al - ASCII code of the	1-st symbol
1   207				     ;		 bl - ASCII code of cx middle symbols
1   208				     ;		 bh - ASCII code of the	last symbol
1   209				     ;		 cx - numbers of middle	symbols
1   210				     ;
1   211				     ;OUTPUTS:	 None
1   212				     ;DESTROYS:	 di, al, cx
1   213				     ;--------------------------------
1   214	01F0			     PutFrameLine    proc
1   215	01F0  FC			 cld	     ;ToDo remove
1   216	01F1  AB			 stosw	     ;put the fisrt symbol
1   217
1   218	01F2  8A C3			 mov al, bl  ;change putting simdol to middle symbol
1   219	01F4  F3> AB			 rep stosw   ;put all middle symbols
1   220
1   221	01F6  8A C7			 mov al, bh  ;change putting simdol to the last	symbol
1   222	01F8  AB			 stosw
1   223
1   224	01F9  C3			 ret
1   225	01FA					     endp
1   226				     ;--------------------------------
1   227
1   228				     ;--------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 5
drawreg.asm



1   229				     ;EXPECTS:	 es->videomemory
1   230				     ;
1   231				     ;INPUTS:	 bx - offset in	vmem
1   232				     ;			 ah - color atr	for reg
1   233				     ;		 dh - color atr	for numbers
1   234				     ;
1   235				     ;DESTROYS:	 bx, di, cx
1   236				     ;--------------------------------
1   237	01FA			     DrawRegText proc
1   238	01FA  33 FF			 xor di, di	     ;di = 0
1   239	01FC  BF 0218r			 lea di, cs:RegText
1   240	01FF  B9 000B			 mov cx, 11d	     ;length of	text
1   241
1   242	0202				 __loop:
1   243	0202  2E: 8A 05			     mov al, cs:[di]
1   244	0205  26: 89 07			     mov es:[bx], ax
1   245	0208  47			     inc di
1   246
1   247	0209  2E: 8A 05			     mov al, cs:[di]
1   248	020C  26: 89 47	02		     mov es:[bx+2], ax
1   249
1   250	0210  81 C3 00A0		     add bx, 160d
1   251	0214  47			     inc di
1   252	0215  E2 EB			     loop __loop
1   253	0217  C3			 ret
1   254
1   255	0218			     endp DrawRegText
1   256				     ;--------------------------------
1   257	0218  61 78 62 78 63 78	64+  RegText: db 'ax','bx','cx','dx','si','di','bp','sp','ds','es','ss'
    258	      78 73 69 64 69 62	70+
    259	      73 70 64 73 65 73	73+
    260	      73
1   261				     ;--------------------------------
1   262				     ;EXPECTS:	 es->videomemory
1   263				     ;
1   264				     ;INPUTS:	 bx - offset in	vmem
1   265				     ;		 dh - color atr	for numbers
1   266				     ;		Stack:	 ax	 <--top
1   267				     ;			 bx
1   268				     ;			 cx
1   269				     ;			 dx
1   270				     ;			 si
1   271				     ;			 di
1   272				     ;			 bp
1   273				     ;			 sp
1   274				     ;			 ds
1   275				     ;			 es
1   276				     ;			 ss
1   277				     ;
1   278				     ;DESTROYS:	 ax, di, bx, cx, si, bp
1   279				     ;--------------------------------
1   280	022E			     DrawRegNumber proc
1   281	022E  8B EC			 mov bp, sp
1   282	0230  BF 000B			 mov di, 11d
1   283	0233  45			 inc bp
1   284	0234  45			 inc bp
1   285	0235				 __next:
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 6
drawreg.asm



1   286	0235  2E: 8B 46	00		     mov word ptr ax, cs:[bp]
1   287	0239  E8 0072			     call OutputNum16
1   288	023C  83 C3 08			     add bx, 8d		 ;horisontal offset
1   289	023F  81 C3 00A0		     add bx, 160d	 ;vertical   offset
1   290
1   291	0243  45			     inc bp
1   292	0244  45			     inc bp
1   293	0245  4F			     dec di
1   294	0246  83 FF 00			     cmp di, 0
1   295	0249  75 EA			     jne __next
1   296	024B  C3			 ret
1   297
1   298	024C			     endp DrawRegNumber
1   299				     ;--------------------------------
1   300
1   301	024C			     .data
1   302				     ;		 0:[left  up   corner]
1   303				     ;		 1:[up	       border]
1   304				     ;		 2:[right up   corner]
1   305				     ;		 3:[left       border]
1   306				     ;		 4:[symbol to fill frame]
1   307				     ;		 5:[right      border]
1   308				     ;		 6:[left  down corner]
1   309				     ;		 7:[bottom     border]
1   310				     ;		 8:[right down corner]
1   311
1   312	0000  DA C4 BF 7C 20 7C	C0+  single_frame db 0dah, 0c4h, 0bfh, '|',  ' ', '|',	0c0h, '-',  0d9h
    313	      2D D9
1   314
1   315	0009  C9 CD BB BA 20 BA	C8+  double_frame db 0c9h, 0cdh, 0bbh, 0bah, ' ', 0bah,	0c8h, 0cdh, 0bch
    316	      CD BC
1   317
1   318	0012  09*(20)		     empty_frame db 9 dup(' ')
    319				     include SMALLIB.ASM
1   320	001B			     .code
1   321				     locals __
1   322
1   323				     ;-------------------------------------------
1   324				     ;Put number in dec	form in	videomem
1   325				     ;
1   326				     ;Expects:	     es->Videomem
1   327				     ;
1   328				     ;Entry(Stack, reverse getting params):
1   329				     ;			     1st arg - offset in videomem
1   330				     ;			     2nd arg - number for output
1   331				     ;			     3rd arg - color atr for output
1   332				     ;
1   333				     ;Output:	     None
1   334				     ;
1   335				     ;Destroys:	     cx, ax, dx, bx, di, si
1   336				     ;
1   337				     ;-------------------------------------------
1   338	024C			     GigaOutputNum10 proc
1   339	024C  55			     push bp		     ;save old bp
1   340	024D  8B EC			     mov bp, sp
1   341
1   342	024F  8B 5E 04			     mov bx, [bp + 4];get memory offset
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 7
drawreg.asm



1   343	0252  8B 46 06			     mov ax, [bp + 6];get number to output
1   344	0255  8B 4E 08			     mov cx, [bp + 8];get color	atribute
1   345
1   346	0258  D1 E1 D1 E1 D1 E1	D1+	     shl cx, 8		     ;put color	atribute in ch
    347	      E1 D1 E1 D1 E1 D1	E1+
    348	      D1 E1
1   349	0268  E8 0026			     call OutputNum10
1   350
1   351	026B  5D			     pop bp		     ;restore old bp value
1   352	026C  C3			     ret
1   353	026D							     endp
1   354
1   355				     ;-------------------------------------------
1   356				     ;Get number from cmd
1   357				     ;-------------------------------------------
1   358				     ;Expects:	     label named buffer
1   359				     ;
1   360				     ;Entry:	     None
1   361				     ;
1   362				     ;Output:	     ax	- number
1   363				     ;
1   364				     ;Destroys:	     cx, dx, di
1   365				     ;
1   366				     ;-------------------------------------------
1   367	026D			     GetNum  proc
1   368
1   369	026D  BA 002Br			     lea dx, buffer
1   370	0270  B4 0A			     mov ah, 0ah
1   371	0272  CD 21			     int 21h		     ;get number from cml
1   372
1   373	0274  33 C9			     xor cx, cx
1   374	0276  8A 0E 002Cr		     mov cl, buffer[1]	     ;get length of number
1   375
1   376	027A  33 C0			     xor ax, ax
1   377	027C  BF 000A			     mov di, 10d
1   378	027F  BE 0002			     mov si, 2h
1   379
1   380	0282				     __Next:
1   381	0282  F7 E7				     mul di			     ;ax = ax*10
1   382	0284  8A 94 002Br			     mov dl, si	+ buffer     ;put in dl	next simbol
1   383	0288  80 EA 30				     sub dl, '0'		     ;convert simbol to	number
1   384
1   385	028B  03 C2				     add ax, dx		     ;ax += dh
1   386
1   387	028D  46				     inc si
1   388	028E  E2 F2				     loop __Next
1   389	0290  C3			     ret
1   390	0291				     endp
1   391
1   392				     ;-------------------------------------------
1   393
1   394				     ;-------------------------------------------
1   395				     ;Put number in dec	form in	videomem
1   396				     ;
1   397				     ;Expects:	     es->Videomem
1   398				     ;
1   399				     ;Entry:	     bx	- offset in videomem
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 8
drawreg.asm



1   400				     ;			     ax	- number for output
1   401				     ;			     ch	- color	atr for	output
1   402				     ;
1   403				     ;Output:	     None
1   404				     ;
1   405				     ;Destroys:	     ax, dx, bx, di, si
1   406				     ;
1   407				     ;-------------------------------------------
1   408	0291			     OutputNum10     proc
1   409	0291  BE 0005			     mov si, 5			     ;max length of number
1   410	0294  BF 000A			     mov di, 10d
1   411
1   412	0297				     __next:
1   413	0297  33 D2				     xor dx, dx			     ;dx = 0
1   414	0299  F7 F7				     div di			     ;ax = dxax/10
1   415											     ;dx = ax%10
1   416
1   417	029B  80 C2 30				     add dl, '0'		     ;make symbol from num
1   418	029E  8A F5				     mov dh, ch			     ;set color
1   419
1   420	02A0  26: 89 57	FE			     mov word ptr es:[bx-2], dx	     ;put symbol in vmem
1   421	02A4  83 EB 02				     sub bx, 2
1   422
1   423	02A7  4E				     dec si
1   424	02A8  83 FE 00				     cmp si, 0
1   425	02AB  75 EA				     jne __next				     ;for(int si = 5; si != 0; si--)
1   426	02AD  C3			     ret
1   427	02AE				     endp
1   428
1   429				     ;----------------------------------------------
1   430				     ;Put number in hex	form in	videomem
1   431				     ;
1   432				     ;Expects:	     es->VideoMem
1   433				     ;
1   434				     ;Entry:	     bx	- offset in videomem
1   435				     ;			     ax	- number to output
1   436				     ;			     dh	- color	atr to output
1   437				     ;
1   438				     ;Output:	     None
1   439				     ;
1   440				     ;Destroys:	     ax, dx, bx, cx, si
1   441				     ;
1   442				     ;----------------------------------------------
1   443	02AE			     OutputNum16     proc
1   444	02AE  B9 0004			     mov cx, 4				     ;length of	hex number
1   445	02B1				     __Next:				     ;do
1   446	02B1  BE 000F				     mov si, 000fh
1   447	02B4  23 F0				     and si, ax					     ;get new number
1   448
1   449	02B6  2E: 8A 94	001Br			     mov dl, cs:[offset	int_to_char_hex[si]] ;make char	from int
1   450
1   451	02BB  26: 89 57	FE			     mov word ptr es:[bx-2], dx	     ;put symb in vmem
1   452	02BF  83 EB 02				     sub bx, 2					     ;bx -= 2
1   453
1   454	02C2  D1 C8 D1 C8 D1 C8	D1+		     ror ax, 4					     ;roll in the right	to 4 bytes
    455	      C8
1   456	02CA  E2 E5				     loop __Next
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 9
drawreg.asm



1   457
1   458	02CC  C3			     ret
1   459	02CD				     endp
1   460
1   461	02CD			     .data
1   462	001B  30 31 32 33 34 35	36+	     int_to_char_hex db	"0123456789ABCDEF"
    463	      37 38 39 41 42 43	44+
    464	      45 46
1   465
1   466	002B			     .code
1   467				     ;----------------------------------------------
1   468
1   469				     ;----------------------------------------------
1   470				     ;Put number in binary form	in videomem
1   471				     ;
1   472				     ;Expects:	     es->VideoMem
1   473				     ;
1   474				     ;Entry: bx	- offset in videomem
1   475				     ;		     ax	- number to output
1   476				     ;		     dh	- color	atr to output
1   477				     ;
1   478				     ;Output:	     None
1   479				     ;
1   480				     ;Destroys:	     ax, bx,cx,	dl
1   481				     ;----------------------------------------------
1   482	02CD			     OutputNum2	     proc
1   483
1   484	02CD  B9 0010			     mov cx, 10h	     ;set number of bits in number
1   485
1   486	02D0				     __Next:
1   487	02D0  B2 01				     mov dl, 1
1   488	02D2  22 D0				     and dl, al			     ;get last number
1   489	02D4  80 C2 30				     add dl, '0'		     ;make char	from number
1   490
1   491	02D7  D1 C8				     ror ax, 1
1   492	02D9  26: 89 17				     mov word ptr es:[bx], dx	     ;print 1 or 0
1   493
1   494	02DC  83 C3 02				     add bx, 2
1   495	02DF  E2 EF				     loop __Next
1   496
1   497	02E1  C3			     ret
1   498	02E2				     endp
1   499				     ;----------------------------------------------
1   500
1   501	02E2			     .data
1   502	002B  05 ?? 05*(20)		     buffer db 5, ?, 5 dup(' ')
    503
    504	0032			     EOP:
    505
    506	0032			     Main:
    507	0032  33 DB			     xor bx, bx								     ;
    508	0034  8E C3			     mov es, bx								     ;es = 0
    509	0036  BB 0020			     mov bx, 4*8							     ;Set es:[bx] to+
    510				     int table ot 9-th interruption
    511
    512	0039  26: 8B 07			     mov ax, word ptr es:[bx]				     ;
    513	003C  A3 0147r			     mov word ptr [Old08Offset], ax		     ;
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 10
drawreg.asm



    514	003F  26: 8B 47	02		     mov ax, word ptr es:[bx + 2]		     ;
    515	0043  A3 0149r			     mov word ptr [Old08Segment], ax		     ;save address of old 08 interruption   +
    516				     handler
    517
    518	0046  26: 8B 47	04		     mov ax, word ptr es:[bx + 4]		     ;
    519	004A  A3 0196r			     mov word ptr [Old09Offset], ax		     ;
    520	004D  26: 8B 47	06		     mov ax, word ptr es:[bx + 6]		     ;
    521	0051  A3 0198r			     mov word ptr [Old09Segment], ax		     ;save address of old 09 interruption   +
    522				     handler
    523
    524	0054  FA			     cli
    525	0055  26: C7 07	0103r		     mov es:[bx], offset NewInt08		     ;
    526	005A  8C C8			     mov ax, cs								     ;
    527	005C  26: 89 47	02		     mov es:[bx	+ 2], ax					     ;Put in int table new  +
    528				     8th int handler
    529
    530	0060  26: C7 47	04 014Br	     mov es:[bx	+ 4], offset NewInt09		     ;
    531	0066  8C C8			     mov ax, cs								     ;
    532	0068  26: 89 47	06		     mov es:[bx	+ 6], ax					     ;Put in int table new  +
    533				     9th int handler
    534	006C  FB			     sti
    535
    536	006D  B8 3100			     mov ax, 3100h
    537	0070  BA 0032r			     mov dx, offset EOP
    538	0073  D1 EA D1 EA D1 EA	D1+	     shr dx, 4								     ;Convert to    +
    539	      EA		     paragraphs
    540	007B  42			     inc dx								     ;Round up
    541	007C  CD 21			     int 21h								     ;End program   +
    542				     with saving code of new int in memory
    543
    544				     end Start
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/23"
??FILENAME			  Text	 "drawreg "
??TIME				  Text	 "01:09:45"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 DRAWREG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUFFER				  Byte	 DGROUP:002B
DOUBLE_FRAME			  Byte	 DGROUP:0009
DRAWFRAME			  Near	 DGROUP:019C
DRAWREGNUMBER			  Near	 DGROUP:022E
DRAWREGTEXT			  Near	 DGROUP:01FA
EMPTY_FRAME			  Byte	 DGROUP:0012
EOP				  Near	 DGROUP:0032
GETNUM				  Near	 DGROUP:026D
GIGAOUTPUTNUM10			  Near	 DGROUP:024C
INT_TO_CHAR_HEX			  Byte	 DGROUP:001B
IS_FRAME_VISIBLE		  Near	 DGROUP:019A
MAIN				  Near	 DGROUP:0032
NEWINT08			  Near	 DGROUP:0103
NEWINT09			  Near	 DGROUP:014B
OLD08OFFSET			  Word	 DGROUP:0147
OLD08SEGMENT			  Word	 DGROUP:0149
OLD09OFFSET			  Word	 DGROUP:0196
OLD09SEGMENT			  Word	 DGROUP:0198
OUTPUTNUM10			  Near	 DGROUP:0291
OUTPUTNUM16			  Near	 DGROUP:02AE
OUTPUTNUM2			  Near	 DGROUP:02CD
PUTFRAMELINE			  Near	 DGROUP:01F0
REGTEXT				  Near	 DGROUP:0218
SINGLE_FRAME			  Byte	 DGROUP:0000
START				  Near	 DGROUP:0100
__CLEAR_FRAME			  Near	 DGROUP:0171
__END_DRAW_FRAME		  Near	 DGROUP:013B
__END_DRAW_FRAME		  Near	 DGROUP:018A
__LOOP				  Near	 DGROUP:0202
__NEXT				  Near	 DGROUP:01C2
__NEXT				  Near	 DGROUP:0235
__NEXT				  Near	 DGROUP:0282
__NEXT				  Near	 DGROUP:0297
__NEXT				  Near	 DGROUP:02B1
__NEXT				  Near	 DGROUP:02D0
Turbo Assembler	 Version 4.1	    03/03/23 01:09:45	    Page 12
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  007E Word	  Public  DATA
  _TEXT				  16  02E2 Word	  Public  CODE
